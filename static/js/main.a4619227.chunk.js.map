{"version":3,"sources":["EditorContext.tsx","markdown/InputArea.tsx","markdown/MarkDown.ts","markdown/OutputArea.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultContext","markdownText","setMarkdownText","EditorContext","createContext","InputArea","className","Consumer","value","onChange","event","target","style","height","scrollHeight","Component","FormatMarkDown","toHtmlString","text","split","map","this","styleText","addBreaks","reduce","combineString","elm","combinedString","index","array","length","replace","OutputArea","markDownOutPut","context","santizedMarkDownOutPut","Dompurify","sanitize","USE_PROFILES","html","dangerouslySetInnerHTML","__html","contextType","App","useState","contextValue","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAOaA,EAAoC,CAC/CC,aAAc,GACdC,gBAAiB,cAGNC,EAAgBC,wBAAiCJ,G,OCY/CK,E,4JApBb,WACE,OACE,qBAAKC,UAAU,YAAf,SACE,cAACH,EAAcI,SAAf,UACG,gBAAGN,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,gBAAjB,OACC,0BACEM,MAAOP,EACPQ,SAAU,SAACC,GACTA,EAAMC,OAAOC,MAAMC,OAAS,GAC5BH,EAAMC,OAAOC,MAAMC,OAASH,EAAMC,OAAOG,aAAe,KACxDZ,EAAgBQ,EAAMC,OAAOH,mB,GAXrBO,aCkCTC,EArCQ,CACrBC,aADqB,SACRC,GAMX,OALmBA,EAChBC,MAAM,MACNC,IAAIC,KAAKC,WACTF,IAAIC,KAAKE,WACTC,OAAOH,KAAKI,gBAIjBF,UAVqB,SAUXG,GACR,OAAOA,EAAM,QAGfD,cAdqB,SAenBE,EACAD,EACAE,EACAC,GAGA,OADAF,GAAkBD,EACdE,IAAUC,EAAMC,OAAS,EAAU,MAAQH,EAAiB,OACpDA,GAGdL,UAzBqB,SAyBXI,GAKR,OAAOA,EACJK,QAJQ,kCAIQ,aAChBA,QANU,4BAMI,aACdA,QALW,sBAKQ,e,gBC5BpBC,E,4JAEJ,WACE,IAAMC,EAAiBjB,EAAeC,aACpCI,KAAKa,QAAQjC,cAETkC,EAAyBC,IAAUC,SAASJ,EAAgB,CAChEK,aAAc,CAAEC,MAAM,KAExB,OACE,qBAAKjC,UAAU,YAAf,SACE,qBACEA,UAAU,UACVkC,wBAAyB,CAAEC,OAAQN,W,GAbpBpB,aAAnBiB,EACGU,YAAcvC,EAmBR6B,QCEAW,MArBf,WACE,MAAwCC,mBACtC,uCADF,mBAGMC,EAAe,CAAE5C,aAHvB,KAGqCC,gBAHrC,MAKA,OACE,sBAAKI,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SACE,mDAEF,qBAAKA,UAAU,UAAf,SACA,eAACH,EAAc2C,SAAf,CAAwBtC,MAAOqC,EAA/B,UACE,cAAC,EAAD,IACA,cAAC,EAAD,aCNOE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a4619227.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport interface EditorContextData {\r\n  markdownText: string;\r\n  setMarkdownText: (text: string) => void;\r\n}\r\n\r\nexport const defaultContext: EditorContextData = {\r\n  markdownText: \"\",\r\n  setMarkdownText: () => {},\r\n};\r\n\r\nexport const EditorContext = createContext<EditorContextData>(defaultContext);\r\n","import React, { Component } from \"react\";\r\nimport { EditorContext } from \"../EditorContext\";\r\n\r\nclass InputArea extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <EditorContext.Consumer>\r\n          {({ markdownText, setMarkdownText }) => (\r\n            <textarea\r\n              value={markdownText}\r\n              onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                event.target.style.height = \"\";\r\n                event.target.style.height = event.target.scrollHeight + \"px\"\r\n                setMarkdownText(event.target.value);\r\n              }}\r\n            ></textarea>\r\n          )}\r\n        </EditorContext.Consumer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputArea;\r\n","const FormatMarkDown = {\r\n  toHtmlString(text: string): string {\r\n    const htmlString = text\r\n      .split(\"\\n\")\r\n      .map(this.styleText)\r\n      .map(this.addBreaks)\r\n      .reduce(this.combineString);\r\n    return htmlString;\r\n  },\r\n\r\n  addBreaks(elm: string): string {\r\n    return elm + \"<br>\";\r\n  },\r\n\r\n  combineString(\r\n    combinedString: string,\r\n    elm: string,\r\n    index: number,\r\n    array: string[]\r\n  ): string {\r\n    combinedString += elm;\r\n    if (index === array.length - 1) return \"<p>\" + combinedString + \"</p>\";\r\n    else return combinedString;\r\n  },\r\n\r\n  styleText(elm: string) {\r\n    const bold = /\\*\\*(\\w+|(\\w+.+\\w+))\\*\\*/g,\r\n      italic = /\\*\\*\\*(\\w+|(\\w+.+\\w+))+?\\*\\*\\*/g,\r\n      underline = /_(\\w+|(\\w+.+\\w+))_/g;\r\n\r\n    return elm\r\n      .replace(italic, \"<i>$1</i>\")\r\n      .replace(bold, \"<b>$1</b>\")\r\n      .replace(underline, \"<u>$1</u>\");\r\n  },\r\n};\r\n\r\nexport default FormatMarkDown;\r\n","import React, { Component } from \"react\";\r\nimport { EditorContext } from \"../EditorContext\";\r\nimport FormatMarkDown from \"./MarkDown\";\r\nimport Dompurify from \"dompurify\";\r\n\r\nclass OutputArea extends Component {\r\n  static contextType = EditorContext;\r\n  render() {\r\n    const markDownOutPut = FormatMarkDown.toHtmlString(\r\n      this.context.markdownText\r\n    );\r\n    const santizedMarkDownOutPut = Dompurify.sanitize(markDownOutPut, {\r\n      USE_PROFILES: { html: true },\r\n    });\r\n    return (\r\n      <div className=\"container\">\r\n        <div\r\n          className=\"preview\"\r\n          dangerouslySetInnerHTML={{ __html: santizedMarkDownOutPut }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OutputArea;\r\n","import React, { useState } from \"react\";\r\nimport \"./style/App.css\";\r\nimport InputArea from \"./markdown/InputArea\";\r\nimport OutputArea from \"./markdown/OutputArea\";\r\nimport { EditorContextData, EditorContext } from \"./EditorContext\";\r\n\r\nfunction App() {\r\n  const [markdownText, setMarkdownText] = useState(\r\n    \"**bold**\\n***italic***\\n_underline_\"\r\n  );\r\n  const contextValue = { markdownText, setMarkdownText };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\">\r\n        <h1>MarkDown Editor</h1>\r\n      </div>\r\n      <div className=\"content\">\r\n      <EditorContext.Provider value={contextValue as EditorContextData}>\r\n        <InputArea />\r\n        <OutputArea />\r\n      </EditorContext.Provider>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}